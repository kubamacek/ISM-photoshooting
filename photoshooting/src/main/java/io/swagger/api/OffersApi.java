/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Offer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-29T16:53:00.885Z[GMT]")
@Api(value = "offers", description = "the offers API")
public interface OffersApi {

    @ApiOperation(value = "Add new offer", nickname = "createOffer", notes = "", tags={ "offers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/offers",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> createOffer(@ApiParam(value = "Offer object that needs to be created" ,required=true )  @Valid @RequestBody Offer body
);


    @ApiOperation(value = "Delete offer", nickname = "deleteOffer", notes = "", tags={ "offers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Offer not found") })
    @RequestMapping(value = "/offers/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteOffer(@Min(1)@ApiParam(value = "Offer id",required=true, allowableValues="") @PathVariable("id") Integer id
);


    @ApiOperation(value = "Update offer", nickname = "editOffer", notes = "", tags={ "offers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Offer not found") })
    @RequestMapping(value = "/offers/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<String> editOffer(@ApiParam(value = "Offer object that needs to be created" ,required=true )  @Valid @RequestBody Offer body
,@Min(1)@ApiParam(value = "Offer id",required=true, allowableValues="") @PathVariable("id") Integer id
);


    @ApiOperation(value = "Get offer by id", nickname = "getOffer", notes = "", response = Offer.class, tags={ "offers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Offer.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Offer not found") })
    @RequestMapping(value = "/offers/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Offer> getOffer(@Min(1)@ApiParam(value = "Offer id",required=true, allowableValues="") @PathVariable("id") Integer id
);


    @ApiOperation(value = "Get all offers", nickname = "getOffers", notes = "", tags={ "offers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/offers",
        method = RequestMethod.GET)
    ResponseEntity<List<Offer>> getOffers();

}
